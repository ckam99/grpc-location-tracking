syntax = "proto3";

package proto;

option go_package = "grpc-location/v1/";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Hello world API";
    version: "1.0.0";
    contact: {
      name: "Tech School";
      url: "https://github.com/ckam99/golang";
      email: "ckam225@gmail.com";
    };
  };
};

// The greeting service definition.
service Greeter {
  // Unary RPCs where the client sends a single request to the server and gets a single response back,
  // just like a normal function call.
  rpc SayHello (HelloRequest) returns (HelloReply) {
    option (google.api.http) = {
      post: "/v1/example/echo"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create new user";
    };
  }

  // Server streaming RPCs where the client sends a request to the server and gets a stream to read a sequence of messages back.
  // The client reads from the returned stream until there are no more messages.
  // gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfReplies(HelloRequest) returns (stream HelloReply);

  // Client streaming RPCs where the client writes a sequence of messages and sends them to the server, again using a provided stream.
  // Once the client has finished writing the messages,it waits for the server to read them and return its response.
  // Again gRPC guarantees message ordering within an individual RPC call.
  rpc LotsOfGreetings(stream HelloRequest) returns (HelloReply);

  // Bidirectional streaming RPCs where both sides send a sequence of messages using a read-write stream.
  // The two streams operate independently, so clients and servers can read and write in whatever order they like:
  // for example, the server could wait to receive all the client messages before writing its responses,
  // or it could alternately read a message then write a message, or some other combination of reads and writes.
  // The order of messages in each stream is preserved.
  rpc BidiHello(stream HelloRequest) returns (stream HelloReply);
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}